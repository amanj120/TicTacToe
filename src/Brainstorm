Game needs the following functions:

check for a win
be able to revert moves all the way to the beginning
register a player move
return a list of possible moves for the current player
be able to simulate a full game randomly while still maintining the current state given a starting point


int[] indeces 0-80 should be the 81 actual pieces of the board
indeces 81-89 represent the nine 3x3 boards
index 90 stores the winner of the game
index 91 stores the index of the last move
    the player of the last move does not need to be stored
index 92 stores the number of the move being played
indeces 93 - 173 store the order of the moves

check for a win stays the same
registering a move means putting the move on the end of the array
    then checkwin
    then alter the rest of the board as necessary

    reverting a move means replacing the last move with azero,
    replacing the corresponding 3x3 board with a 0,
    and the game board with a 0
    and then running checkwin

    Checkwin only needs to check the last move played

    No methods (except move) should take in parameters then because everything is stored in the board

    all of this can be stored in a byte[] which makes it even less memory intensive

    Could run on arduino???
Game Main method (for debugging)
    /*public static void main(String[] args) {
        init();
        //PrintBoard.print();
        //int[] m = {7,64,9,1,10,12,30,28,11,71,79,65,19,40,37,42,55,6,58,39,29,24,57,32,51,56,25,69,61,63};

        //move(0);
        *//*move(64);
        move(9);
        move(1);
        move(10);
        move(12);
        move(30);
        move(28);
        move(11);*//*
        //revertPrint();
        //revertPrint();
        //movePrint(28);
        //movePrint(11);
        //System.out.println("here");
        int wins = 0;
        int losses = 0;
        int ties = 0;
        long start = System.currentTimeMillis();
        for(int i = 0; i < 10000; i++) {
            int x = simulate();
            //System.out.println(x);
            if (x == 1){
                losses++;
            } else if (x == -1) {
                ties++;
            } else {
                wins++;
            }
        }
        long end = System.currentTimeMillis();

        System.out.println("wins: " + wins + " losses: " + losses + " ties: " + ties + " time: " + (end-start));
        //61
        *//*for(int i = 0; i < m.length - 2; i++) {
            movePrint(m[i]);
        }
        movePrint(m[m.length - 2]);
        PrintBoard.print();
        System.out.println(Arrays.toString(board));
        System.out.println(getPossibleMoves().toString());
        //System.out.println(simulate());
        *//*
    }*/

to make this parallelizable:

the board needs to be copied into the gpu, and needs to be lightweight

6/17/19

Need to make finding all pairs more efficient, less array copies
need to decide if it's worth it to prune branches based on averages, maybe go a layer deeper for each unpruned branch
gotta be smart

a b c
d e f
g h i

 1    2    3    4    5    6    7    8
abc, def, ghi, adg, beh, cfi, aei, gec


abc, def, ghi, aei

3, 5, 7, 11

a 1, 4      33
b 1         3
c 1         3
d 2         5
e 2, 4      55
f 2         5
g 3         7
h 3         7
i 3, 4      77

33  3   3
5   55  5
7   7   77

3   5   77
3   55  7
33  5   7

2 matchers
2 inputs
8 mods

AA = 1;
AB = 1;
BA = 1;
BB = 1;

int[] matcha = {33, 3, 3, 5, 55, 5, 7, 7, 77};
int[] matchb = {3, 5, 77, 3, 55, 7, 33, 5, 7};

for (1,9) {
    if (board[i] == 1) {
        AA *= matcha[i];
        AB *= matchb[i];
    }
    if (board[i] == 2) {
        BA *= matcha[i];
        BB *= matchb[i];
    }
}
for (27, 125, 343, 1331)
    for (AA, AB, BA, BB) {
        if div then return
    }

    /*
        private static final int[] matcha = {33, 3, 3, 5, 55, 5, 7, 7, 77};
        private static final int[] matchb = {3, 5, 77, 3, 55, 7, 33, 5, 7};

        private static byte check3x3board(int boardIdx, byte[] board) {
            if(board[boardIdx + 81] != 0) {
                return board[boardIdx + 81];
            }
            int start = boardIdx * 9;
            int AA = 1, AB = 1, BA = 1, BB = 1;
            for(int i = 0; i < 9; i++) {
                if (board[i + start] == 1) {
                    AA *= matcha[i];
                    AB *= matchb[i];
                } else if (board[i + start] == 2) {
                    BA *= matcha[i];
                    BB *= matchb[i];
                }
            }
            int[] cubes = {27, 125, 343, 1331};
            for(int c : cubes) {
                if(AA % c == 0 || AB % c == 0)
                    return 1;
                if(BA % c == 0 || BB % c == 0)
                    return 2;
            }
            return 0;
        }
        */



adg



adg, beh, cfi, gec



1, 2, 3, 4, 5,  6,  7,  8
23, 3, 5, 7, 11, 13, 17, 19

a: 1, 4, 7      23 * 7 * 17         2737
b: 1, 5         23 * 11             253
c: 1, 6, 8      23 * 13 * 19        5681
d: 2, 4         3 * 7               21
e: 2, 5, 7, 8   3 * 11 * 17 * 19    10659
f: 2, 6         3 * 13              39
g: 3, 4, 8      5 * 7  * 19         665
h: 3, 5         5 * 11              55
i: 3, 6, 7      5 * 13 * 17         1105

2737 * 253 * 5681 * 21 * 10659 * 39 * 665 * 55 * 1105

3081597750


   1  2
1  0  0
2  0  0
3  0  0
4  0  0
5  0  0
6  0  0
7  0  0
8  0  0

a b c
d e f
g h i

if (e != 0) {
    if (b!= 0) {
        if(e == b && e == h) {
            return e;
        }
    } else if (d != 0) {
        if(e == d && e == f) {
            return e;
        }
    } else if (a != 0) {
        if(e == a && e == i) {
            return e;
        }
    } else if (g != 0) {
        if(e == g && e == c) {
            return e;
        }
    }
} else if (a != 0) {
    if (b!= 0) {
        if(a == b && a == c) {
            return a;
        }
    } else if (d != 0) {
        if(a == d && a == g) {
            return a;
        }
    }
} else if (i != 0) {
    if (h!= 0) {
        if(i == h && i == g) {
            return i;
        }
    } else if (f != 0) {
        if(i == f && i == c) {
            return i;
        }
    }
} else {
    return 0;
}

24